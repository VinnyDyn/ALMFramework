variables:
- name: skipVersionUpdate
  value: 0

- value: targetEnvironment
  value: ''

pool:
  name: Default

parameters:
- name: serviceConnectionName
  displayName: 'Service Connection Name'
  type: string
  default: '#SERVICECONNECTIONNAME#'

- name: solution
  displayName: 'Solution Unique Name'
  type: string
  default: '#SOLUTION#'

- name: version
  displayName: 'Solution Version'
  type: string
  default: '#VERSION#'

- name: gitUserName
  displayName: 'Git User Name'
  type: string
  default: '#GITNAME#'

- name: gitUserEmail
  displayName: 'Git User Email'
  type: string
  default: '#GITEMAIL#'

trigger: none

steps:
- checkout: self
  persistCredentials: true

- template: templates\extensions\new.yaml

- powershell: |
    $sourceBranch = '$(Build.SourceBranch)'.Split('/')
    $lastIndex = $sourceBranch[-1]
    echo "##vso[task.setvariable variable=branch]$lastIndex"
  displayName: 'üüßGet branch'

- powershell: |
    git config --global user.email "${{parameters.gitUserEmail}}"
    git config --global user.name "${{parameters.gitUserName}}"
    git fetch --all
    git branch --all
    git checkout '$(branch)'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'üüßGit fetch, branch and checkout'

- task: PowerPlatformToolInstaller@2
  displayName: 'üü™Power Platform Tool Installer'

- task: PowerPlatformSetConnectionVariables@2
  name: connection
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: '${{parameters.serviceConnectionName}}'
  displayName: 'üü™Set Connection Variables'

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Set-Pac-Tools-Path "$(Agent.OS)"
  displayName: 'üü¶Set pac path'
  # outputs: $pacPath, folderSpliter

- template: templates\extensions\trace.yaml
  parameters:
    content: "$(Agent.OS)\r\n$env:POWERPLATFORMTOOLS_PACCLIPATH\r\n$(pacPath)\r\n$(BuildTools.EnvironmentUrl)\r\n$(connection.BuildTools.TenantId)\r\n$(connection.BuildTools.ApplicationId)\r\n$(connection.BuildTools.ClientSecret)"

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Invoke-Pac-Authenticate -p '$(pacPath)' -t '$(connection.BuildTools.TenantId)' -c '$(connection.BuildTools.ApplicationId)' -cs '$(connection.BuildTools.ClientSecret)' -u '$(BuildTools.EnvironmentUrl)'
  displayName: '‚¨õpac auth create'
  failOnStderr: true

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Invoke-Pac-Solution-Online-Version -p '$(pacPath)' -s '${{parameters.solution}}' -v '${{parameters.version}}'
  displayName: '‚¨õpac solution online-version'
  condition: eq(variables['skipVersionUpdate'], 1)
  failOnStderr: true

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Invoke-Clone-Or-Sync-Solution -p '$(pacPath)' -t '$(connection.BuildTools.TenantId)' -c '$(connection.BuildTools.ApplicationId)' -cs '$(connection.BuildTools.ClientSecret)' -u '$(BuildTools.EnvironmentUrl)' -f '$(System.DefaultWorkingDirectory)/solution/' -s '${{parameters.solution}}'
  displayName: '‚¨õpac solution clone or sync'
  failOnStderr: true

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Invoke-Solution-Create-Settings -p '$(pacPath)' -f '$(System.DefaultWorkingDirectory)/solution/' -s '${{parameters.solution}}' -e variables['targetEnvironment']
  displayName: '‚¨õpac create-settings'
  failOnStderr: true

- powershell: |
    . '$(System.DefaultWorkingDirectory)/powershell/functions.ps1'
    Invoke-Solution-Export-Data -p '$(pacPath)' -f '$(System.DefaultWorkingDirectory)/dataSettings/'
  displayName: '‚¨õpac data export'
  failOnStderr: true

# - powershell: |
#      . '$(System.DefaultWorkingDirectory)/powershell/json.ps1'
#      JsonHelperMap -tgt '_' -json '$(System.DefaultWorkingDirectory)/solution/unmanaged/$(solution)/Workflows' -jsonConfig '_' -fn '___' -p 'defaultValue' -sp 'triggers,actions' -a 'Erase'
#    displayName: 'üü¶JSON ERASE defaultValue Workflows'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(pacPath)/logs/pac-log.txt'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  condition: failed()
  continueOnError: true
  displayName: '‚ùå Drop pac-log.txt'

- powershell: |
    git pull origin '$(branch)'
    git merge origin/'$(branch)'
    git add --all
    git commit -m 'Solution ${{parameters.solution}}'
    git push origin '$(branch)' -f
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'üüßGit add, commit and push'

- template: templates\extensions\publish.yaml